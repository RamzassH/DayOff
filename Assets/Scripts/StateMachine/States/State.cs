using System.Collections;
using System.Collections.Generic;
using UnityEngine;

namespace TMPVersion
{
    public class State
    {
        // Шиза version 2.0
        // Инструктция того что и как
        // должно быть сделано в последующих состояниях
        // 1. Каждое состояние должно наследоваться от этого класса
        // 2. Пример создания иерархии состояний:
        //      State -> Grounded,
        //      Grounded -> Standing, Grounded -> Ducking,
        //      По итогу состояние Grounded содержит
        //      в себе два подсостояния. Проверка хуиз ху через as.
        // 3. Состояние ОБЯЗАТЕЛЬНО должно хранить ссылку на
        // машину состояний. По задумке того, кто эту всю байду придумал
        // смена состояний должна происходить в LogicUpdate. Поэтому храним
        // ссылку на машину.
        // 4. ПОМИМО самой машины ОБЯЗАТЕЛЬНО необходимо хранить ссылку
        // на сам юнит, к которому применимо состояние. ЮНИТ должен внутри 
        // себя хранить ВСЕ ДОПУСТИМЫЕ для себя состояния и давать к ним доступ
        // чтобы машина их меняла. Вся эта байда так же ссылочная.
        // 5. Всё что можно производить с юнитом в текущем состоянии
        // обрабатывают функции HandleInput(), LogicUpdate() каждый фрейм;
        // PhysicsUpdate() вызывается в FixedUpdate().

        StateMachine _machine;
        // Здесь объявить переменную,
        // которая будет хранить ссылку на юнит.
        // Конструктор можно один на все состояния. По типу
        //
        //State(StateMachine machine, Unit unit) { 
        //    _machine = machine;
        //    _unit = unit;
        //}

        public virtual void Enter()
        {
            //Действия после смены
            //прошлого состояния на
            //ЭТО состояние
        }

        public virtual void HandleInput()
        {
            // Здесь обрабатываются
            // все вводы игрока
        }

        public virtual void LogicUpdate()
        {
            // Обработка базовой логики,
            // связанной с состоянием
        }

        public virtual void PhysicsUpdate()
        {
            // Обработка логики физики
        }

        public virtual void Exit()
        {
            //Действия после смены
            //ЭТОГО состояния на
            //новое состояние
        }
    }
}